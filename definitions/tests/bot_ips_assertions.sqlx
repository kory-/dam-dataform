config {
  type: "assertion",
  schema: "dam_workflow_test",
  name: "bot_ips_assertions",
  tags: ["test", "quality", "ml"]
}

-- Only return rows if there are actual failures
WITH test_results AS (
  -- Test 1: No NULL values in required fields
  SELECT 
    "bot_ips_null_check" AS test_name,
    COUNT(*) AS failure_count
  FROM ${ref("bot_ips")}
  WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
    AND (
      ip IS NULL
      OR log_date IS NULL
      OR bot_flag IS NULL
      OR anomaly_score IS NULL
      OR risk_level IS NULL
    )
  
  UNION ALL
  
  -- Test 2: No duplicate IP/date combinations
  SELECT 
    "bot_ips_duplicates" AS test_name,
    COUNT(*) AS failure_count
  FROM (
    SELECT 
      ip,
      log_date,
      COUNT(*) AS dup_count
    FROM ${ref("bot_ips")}
    WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
    GROUP BY ip, log_date
    HAVING COUNT(*) > 1
  )
  
  UNION ALL
  
  -- Test 3: Valid anomaly scores
  SELECT 
    "bot_ips_invalid_scores" AS test_name,
    COUNT(*) AS failure_count
  FROM ${ref("bot_ips")}
  WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
    AND anomaly_score < 0  -- Anomaly score should be non-negative
  
  UNION ALL
  
  -- Test 4: Valid risk levels
  SELECT 
    "bot_ips_invalid_risk_level" AS test_name,
    COUNT(*) AS failure_count
  FROM ${ref("bot_ips")}
  WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
    AND risk_level NOT IN ('high_risk', 'medium_risk', 'low_risk', 'normal')
  
  UNION ALL
  
  -- Test 5: Bot flag consistency with anomaly score
  SELECT 
    "bot_ips_flag_score_mismatch" AS test_name,
    COUNT(*) AS failure_count
  FROM ${ref("bot_ips")}
  WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
    AND (
      -- If marked as bot, score should be relatively high
      (bot_flag = TRUE AND anomaly_score < 0.001)
      -- Very high scores should be flagged as bots
      OR (bot_flag = FALSE AND anomaly_score > 0.9)
    )
  
  UNION ALL
  
  -- Test 6: Data freshness check
  SELECT 
    "bot_ips_data_freshness" AS test_name,
    CASE
      WHEN NOT EXISTS (
        SELECT 1 
        FROM ${ref("bot_ips")}
        WHERE log_date = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
      ) THEN 1
      ELSE 0
    END AS failure_count
  
  UNION ALL
  
  -- Test 7: Reasonable bot detection rate
  SELECT 
    "bot_ips_detection_rate" AS test_name,
    CASE
      WHEN bot_ratio > 0.5 OR bot_ratio < 0.001 THEN 1
      ELSE 0
    END AS failure_count
  FROM (
    SELECT 
      COUNTIF(bot_flag = TRUE) / COUNT(*) AS bot_ratio
    FROM ${ref("bot_ips")}
    WHERE log_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)
  )
)
-- Only return rows where tests failed
SELECT * FROM test_results WHERE failure_count > 0